#include <iostream>
#include <list>
#include <iterator>
#include <cmath>
using namespace std;


list <int> enitialize_fibonatchi();
void showlist(list <int> g);
int get_next_item(list <int> g);
bool is_even(int item);


//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

//1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.



int main() 
{
    int the_sum = 0;
    
    list <int> fibonatchi = enitialize_fibonatchi();

    while (*fibonatchi.begin() < 4*pow(10.0, 6.0))
    {
        int the_next_item = get_next_item(fibonatchi);

        if (is_even(the_next_item))
        {
            the_sum += the_next_item;
        }
        fibonatchi.push_front(the_next_item);
        fibonatchi.pop_back();
    }
    cout<<the_sum<<"";
    
    return 0;
}


list <int> enitialize_fibonatchi()
{
    list <int> fibonachi;
    for (int i = 0; i < 3; i++)
    {
        fibonachi.push_front(i);
    }
    return fibonachi;
}

void showlist(list <int> g)
{
    list <int> :: iterator it;
    for(it = g.begin(); it != g.end(); ++it)
        cout << '\t' << *it;
    cout << '\n';
}

int get_next_item(list <int> g)
{
    int the_sum = 0;
    list <int> :: iterator it;
    it = g.begin();

    the_sum += *it;
    it++;
    the_sum += *it;

    return the_sum;

}

bool is_even(int item)
{
    if (item % 2 == 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}